<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PublishTrimmed>true</PublishTrimmed>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="Ratio.fs" />
    <Compile Include="Collection.fs" />
    <Compile Include="FilePosition.fs" />
    <Compile Include="RegexExtensions.fs" />
    <Compile Include="PSCmdletExtensions.fs" />
    <Compile Include="RepairEncodingCommand.fs" />
    <Compile Include="TestUtf8SignatureCommand.fs" />
    <Compile Include="AddUtf8SignatureCommand.fs" />
    <Compile Include="RemoveUtf8SignatureCommand.fs" />
    <Compile Include="TestUtf8EncodingCommand.fs" />
    <Compile Include="TestBrokenEncodingCommand.fs" />
    <Compile Include="GetFileEncodingCommand.fs" />
    <Compile Include="TestFinalNewlineCommand.fs" />
    <Compile Include="TestTextFileCommand.fs" />
    <Compile Include="TestBinaryFileCommand.fs" />
    <Compile Include="GetFileIndentsCommand.fs" />
    <Compile Include="GetFileLineEndingsCommand.fs" />
    <Compile Include="GetFileContentsInfoCommand.fs" />
    <Compile Include="GetFileEditorConfigCommand.ps1.fs" />
    <Compile Include="TestFileEditorConfigCommand.fs" />
    <Compile Include="RepairFileEditorConfigCommand.fs" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="editorconfig" Version="0.12.2" />
    <PackageReference Include="PowerShellStandard.Library" Version="5.1.1" />
  </ItemGroup>
  <ItemGroup>
    <None Include="$(MSBuildProjectName).psd1" Pack="true" CopyToOutputDirectory="Always" />
    <None Include="$(MSBuildProjectName).dll-Help.xml" Pack="true" CopyToOutputDirectory="Always" />
  </ItemGroup>
  <Target Name="SetAssemblyVersion" BeforeTargets="GetAssemblyVersion">
    <Exec Command="pwsh -noni -nop -c &quot;Import-LocalizedData -BindingVariable m -FileName $(MSBuildProjectName); (gv m -va).ModuleVersion&quot;" ConsoleToMSBuild="true" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="Version" />
    </Exec>
  </Target>
  <Target Name="doc" DependsOnTargets="Documentation" />
  <Target Name="Documentation" DependsOnTargets="Publish">
    <Copy SourceFiles="$(OutputPath)\publish\FSharp.Core.dll" DestinationFolder="$(OutputPath)" />
    <Copy SourceFiles="$(OutputPath)\publish\EditorConfig.Core.dll" DestinationFolder="$(OutputPath)" />
    <Exec Command="pwsh -noni -nop -c &quot;Import-Module (Resolve-Path $(OutputPath)*.psd1); New-MarkdownHelp -Module $(MSBuildProjectName) -OutputFolder ..\..\docs -ea 0; Update-MarkdownHelp ..\..\docs; New-ExternalHelp ..\..\docs -OutputPath . -Force&quot;" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" />
  </Target>
  <Target Name="test" DependsOnTargets="Pester" />
  <Target Name="Pester" DependsOnTargets="Publish" Condition="'$(Configuration)' == 'Debug'">
    <Copy SourceFiles="$(OutputPath)\publish\FSharp.Core.dll" DestinationFolder="$(OutputPath)" />
    <Copy SourceFiles="$(OutputPath)\publish\EditorConfig.Core.dll" DestinationFolder="$(OutputPath)" />
    <Exec Command="pwsh -noni -nop -c &quot;cd ..\..; Invoke-Pester&quot;" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" />
    <Exec Command="powershell -noni -nop -c &quot;cd ..\..; Invoke-Pester&quot;" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" Condition=" '$(OS)' == 'Windows_NT' " />
  </Target>
  <ItemGroup>
    <PSModulePath Include="$(PSModulePath)" Exclude="C:\Program Files\**;C:\Windows\**;C:\ProgramData\chocolatey\**" />
  </ItemGroup>
  <Target Name="PublishToGallery" DependsOnTargets="Publish" Condition="'$(Configuration)' == 'Release'">
    <RemoveDir Directories="@(PSModulePath-&gt;'%(FullPath)\$(MSBuildProjectName)')" />
    <Copy SourceFiles="$(OutputPath)\publish\FSharp.Core.dll" DestinationFolder="$(OutputPath)" />
    <Copy SourceFiles="$(OutputPath)\publish\EditorConfig.Core.dll" DestinationFolder="$(OutputPath)" />
    <ItemGroup>
      <ModuleFiles Include="$(OutputPath)\*" />
    </ItemGroup>
    <Message Text="@(PSModulePath-&gt;'%(FullPath)\$(MSBuildProjectName)\$(Version)')" />
    <Copy SourceFiles="@(ModuleFiles)" DestinationFolder="@(PSModulePath-&gt;'%(FullPath)\$(MSBuildProjectName)\$(Version)')" />
    <Error Text="To publish, first set gallerykey" Condition="!$(gallerykey)" />
    <Exec Command="pwsh -noni -nop -c &quot;Import-Module $(MSBuildProjectName); Publish-Module -Name $(MSBuildProjectName) -NuGetApiKey $(gallerykey)&quot;" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" Condition="$(gallerykey)" />
  </Target>
  <Target Name="PublishModule" DependsOnTargets="Publish" Condition="'$(Configuration)' == 'Release'">
    <RemoveDir Directories="@(PSModulePath-&gt;'%(FullPath)\$(MSBuildProjectName)')" />
    <Copy SourceFiles="$(OutputPath)\publish\FSharp.Core.dll" DestinationFolder="$(OutputPath)" />
    <Copy SourceFiles="$(OutputPath)\publish\EditorConfig.Core.dll" DestinationFolder="$(OutputPath)" />
    <ItemGroup>
      <ModuleFiles Include="$(OutputPath)\*" />
    </ItemGroup>
    <Copy SourceFiles="@(ModuleFiles)" DestinationFolder="@(PSModulePath-&gt;'%(FullPath)\$(MSBuildProjectName)\$(Version)')" />
    <Exec Command="pwsh -noni -nop -c &quot;[bool](Get-SecretInfo $(MSBuildProjectName) -Vault PowerShellGallery)&quot;" ConsoleToMSBuild="true" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="HasApiKey" />
    </Exec>
    <Error Text="To publish, first run: .\Set-ApiKey.ps1" Condition="!$(HasApiKey)" />
    <Exec Command="pwsh -nop -c &quot;(New-Object PSCredential _,(Get-Secret $(MSBuildProjectName) -Vault PowerShellGallery)).GetNetworkCredential().Password&quot;" ConsoleToMSBuild="true" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" Condition="$(HasApiKey)">
      <Output TaskParameter="ConsoleOutput" PropertyName="ApiKey" />
    </Exec>
    <Exec Command="pwsh -noni -nop -c &quot;Import-Module $(MSBuildProjectName); Publish-Module -Name $(MSBuildProjectName) -NuGetApiKey $(ApiKey)&quot;" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" Condition="$(HasApiKey)" />
  </Target>
</Project>
